{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/web/get-post","result":{"data":{"markdownRemark":{"id":"3d17c4cd-6f1c-5a9b-b9c2-99e316bf8828","html":"<p>안녕하세요!</p>\n<p>이번 포스팅 에서는 웹 개발자 라면 꼭 알아야 할 개념인 <U>HTTP 통신 함수의 종류 중 <code class=\"language-text\">GET</code>과 <code class=\"language-text\">POST</code> 방식</U>에 대해 알아 보도록 하겠습니다!😄<br>\n개발자 면접을 볼 때 가끔 질문을 받는 내용이여서 정리하게 되었습니다.📙  </p>\n<p>🗣 참고: <a href=\"https://shinsangeun.github.io/posts/interview/job-Interview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">👉🏻경력 개발자 면접 질문</a> 포스팅도 함께 읽으시면 면접 시 도움이 됩니다!🙆🏻‍♀️</p>\n<hr>\n<h3 id=\"1-http란\" style=\"position:relative;\"><a href=\"#1-http%EB%9E%80\" aria-label=\"1 http란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. HTTP란?</h3>\n<ul>\n<li><code class=\"language-text\">HTTP(Hyper Text Transfer Protocol</code>)는 웹상에서 클라이언트와 서버 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜입니다. </li>\n<li>클라이언트가 HTTP 프로토콜을 통해 <U>서버에게 요청을 보내면 요청에 맞는 응답을 클라이언트에게 전송</U>합니다. HTTP 요청에 포함되는 <strong>HTTP 메소드</strong>는 서버가 요청을 수행하기 위해 해야할 행동을 표시하는 용도로 사용합니다. </li>\n<li>이러한 <strong>HTTP 메소드</strong> 중 대표 적인<code class=\"language-text\">GET</code>과 <code class=\"language-text\">POST</code>의 특징과 차이점을 알아보도록 하겠습니다.</li>\n</ul>\n<p> (HTTP 통신 웹 브라우저 동작 과정은 <a href=\"https://shinsangeun.github.io/categories/Web/web-process\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">👉🏻여기</a> 를 참고해 주세요!)</p>\n<h3 id=\"2-get-방식-특징\" style=\"position:relative;\"><a href=\"#2-get-%EB%B0%A9%EC%8B%9D-%ED%8A%B9%EC%A7%95\" aria-label=\"2 get 방식 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GET 방식 특징</h3>\n<ul>\n<li>GET은 <strong>서버로부터 정보를 조회</strong>하기 위해 설계된 메소드 입니다.</li>\n<li>요청을 전송할 때 필요한 데이터를 Body에 담지 않고, <strong>쿼리 스트링을 통해 전송</strong> 합니다. (<code class=\"language-text\">URL 끝에 ?와 함께 이름과 값으로 쌍을 이루는 요청 파라미터</code>를 쿼리 스트링이라고 합니다.)</li>\n<li>만약 요청 파라미터가 <U>여러개 일 경우라면 &#x26;으로 연결</U> 합니다. 쿼리스트링을 사용하게 되면 URL에 조회 조건을 표시하기 때문에 특정 페이지를 링크하거나 북마크 할 수 있습니다.\n(ex. <code class=\"language-text\">http://localhost:3000/reserve?id=1&amp;date=2021-02-22</code>)</li>\n<li>GET은 <code class=\"language-text\">불필요한 요청을 제한하기 위해 요청이 캐시</code>될 수 있습니다.</li>\n<li><strong>정적 컨텐츠</strong>(js, css, 이미지)는 데이터양이 크고, 변경될 일이 적어서 반복해서 동일한 요청을 보낼 필요가 없습니다. 정적 컨텐츠를 요청하고 나면 <code class=\"language-text\">브라우저에서는 요청을 캐시</code>해두고, 동일한 요청이 발생할 때 서버로 요청을 보내지 않고 <code class=\"language-text\">캐시된 데이터를 사용</code>합니다. </li>\n<li>프론트엔드 개발을 하다보면 정적 컨텐츠가 캐시돼 컨텐츠를 변경해도 내용이 바뀌지 않는 경우가 종종 발생합니다. 이 때, 브라우저의 캐시를 지워주면 다시 컨텐츠를 조회하기 위해 서버로 요청을 보내게 됩니다.</li>\n</ul>\n<h3 id=\"3-post-방식-특징\" style=\"position:relative;\"><a href=\"#3-post-%EB%B0%A9%EC%8B%9D-%ED%8A%B9%EC%A7%95\" aria-label=\"3 post 방식 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. POST 방식 특징</h3>\n<ul>\n<li>POST는 <strong>리소스를 생성/변경</strong>하기 위해 설계된 메소드 입니다.</li>\n<li>GET과 달리 전송해야될 데이터를 HTTP 메세지의 <strong>Body에 담아서 전송</strong>합니다. </li>\n<li>HTTP 메세지의 <U>Body는 길이의 제한없이 데이터를 전송</U>할 수 있습니다. 그래서 POST 요청은 GET과 달리 대용량 데이터를 전송할 수 있습니다. </li>\n<li>POST는 <U>데이터가 Body로 전송되고 내용이 눈에 보이지 않아 GET보다 보안적인 면에서 안전하다고 생각할 수 있지만</U>, POST 요청도 크롬 개발자 도구, Fiddler와 같은 툴로 요청 내용을 확인할 수 있기 때문에 <strong>민감한 데이터의 경우에는 반드시 암호화</strong>해 전송해야 합니다.</li>\n</ul>\n<h3 id=\"4-getpost-장단점-및-사용\" style=\"position:relative;\"><a href=\"#4-getpost-%EC%9E%A5%EB%8B%A8%EC%A0%90-%EB%B0%8F-%EC%82%AC%EC%9A%A9\" aria-label=\"4 getpost 장단점 및 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. GET/POST 장단점 및 사용</h3>\n<ul>\n<li>\n<p>GET 방식(Select)</p>\n<ul>\n<li>서버에게 <code class=\"language-text\">동일한 요청을 여러 번 전송하더라도 동일한 응답</code>이 돌아옵니다. 설계원칙에 따라 <strong>서버의 데이터나 상태를 변경시키지 않아야</strong> 하기 때문에 주로 <strong>조회를 할 때에 사용</strong> 합니다.</li>\n<li>예를 들어, 브라우저에서 웹페이지를 열어보거나 게시글을 읽는 등 조회를 하는 행위는 GET으로 요청하게 됩니다.</li>\n<li>(ex. 검색 결과 등 고정적인 주소 및 링크 주소로 사용)</li>\n</ul>\n</li>\n<li>\n<p>POST 방식(Update)</p>\n<ul>\n<li>서버에게 동일한 요청을 여러 번 전송해도 응답은 항상 다를 수 있습니다. 이에 따라 POST는 서버의 상태나 데이터를 변경시킬 때 사용됩니다. </li>\n<li>(ex. 게시글을 쓰면 서버에 게시글이 저장이 되고, 게시글을 삭제하면 해당 데이터가 없어지는 등) </li>\n<li><strong>POST</strong>는 <code class=\"language-text\">생성, 수정, 삭제</code>에 사용할 수 있지만, <code class=\"language-text\">생성</code>에는 <strong>POST</strong>, <code class=\"language-text\">수정</code>은 <strong>PUT</strong> 또는 <strong>PATCH</strong>, <code class=\"language-text\">삭제</code>는 <strong>DELETE</strong>가 더 용도에 맞는 메소드라고 할 수 있습니다.</li>\n<li>POST를 사용하면 정보를 숨길 수 있지만 <code class=\"language-text\">SSL(Secure Sockets Layer)</code>을 사용 하지 않으면 GET과 마찬가지 입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-getpost-차이점\" style=\"position:relative;\"><a href=\"#5-getpost-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"5 getpost 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. GET/POST 차이점</h3>\n<ul>\n<li>GET과 POST는 이처럼 큰 차이가 있기 때문에 설계 원칙에 따라 적절한 용도로 사용 해야 합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">GET</th>\n<th align=\"center\">POST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">URL길이(최대 2048자)는 한계가 있음</td>\n<td align=\"center\">해결하고 싶다면 POST 메소드 사용</td>\n</tr>\n<tr>\n<td align=\"center\">캐시가 남아있어 전송 속도가 빠름</td>\n<td align=\"center\">캐시가 남지 않아 보안적인 면에서 유리</td>\n</tr>\n<tr>\n<td align=\"center\">브라우저 히스토리에 파라미터가 남음</td>\n<td align=\"center\">히스토리에 파라미터가 저장되지 않음</td>\n</tr>\n<tr>\n<td align=\"center\">ASCII 캐릭터만 허용</td>\n<td align=\"center\">바이너리 데이터가 허용</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>오늘 준비한 내용은 여기까지 입니다.<br>\n이번 포스팅이 도움이 되셨거나 궁금한 점이 있으시다면 언제든지 댓글을 달아주세요!🙋🏻‍♀️✨<br>\n</p>","fields":{"slug":"/posts/web/get-post","tagSlugs":["/tag/web/","/tag/http/"]},"frontmatter":{"date":"2021-02-22 16:24:33","description":"이번 포스팅 에서는 웹 개발자 라면 꼭 알아야 할 개념인 HTTP 통신 함수의 종류 중 `GET`과 `POST` 방식에 대해 알아 보도록 하겠습니다!😄","tags":["Web","HTTP"],"title":"[Web] GET/POST 방식의 특징과 차이점","socialImage":null}}},"pageContext":{"slug":"/posts/web/get-post"}},"staticQueryHashes":["251939775","401334301","825871152"]}