{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodejs/closure-function","result":{"data":{"markdownRemark":{"id":"64d35f82-88c9-5c0e-b815-0220d2182f7e","html":"<p>안녕하세요!</p>\n<p>이번 포스팅 에서는 <code class=\"language-text\">Javascript</code>에서 중요한 개념 중 하나인 <strong>클로저</strong>에 대해 작성해 보겠습니다.<br>\n저도 클로저는 들어보기만 하고 정확한 개념을 다시 짚어 보기 위해 정리 해 보겠습니다!😄</p>\n<hr>\n<h3 id=\"1-클로저closure란\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%A1%9C%EC%A0%80closure%EB%9E%80\" aria-label=\"1 클로저closure란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클로저(Closure)란?</h3>\n<ul>\n<li>클로저는 함수를 일급 객체로 취급하는 함수형 프로그래밍 언어에서 사용되는 중요한 특성 입니다.</li>\n<li>클로저는 “함수가 선언 됐을 때의 렉시컬 환경(Lexical environment)” 입니다.</li>\n</ul>\n<h4 id=\"2-클로저-함수-예제\" style=\"position:relative;\"><a href=\"#2-%ED%81%B4%EB%A1%9C%EC%A0%80-%ED%95%A8%EC%88%98-%EC%98%88%EC%A0%9C\" aria-label=\"2 클로저 함수 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 클로저 함수 예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">innerFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<ul>\n<li>함수 <code class=\"language-text\">outerFunc</code> 내에서 내부함수 <code class=\"language-text\">innerFunc</code>가 선언 되고 호출 되었습니다. </li>\n<li>이때 내부함수 <code class=\"language-text\">innerFunc</code>는 자신을 포함하고 있는 외부함수 <code class=\"language-text\">outerFunc</code>의 변수 x에 접근할 수 있습니다. 이는 함수 <code class=\"language-text\">innerFunc</code>가 함수 <code class=\"language-text\">outerFunc</code>의 내부에 선언되었기 때문 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">스코프는 함수를 호출할 때가 아니라 함수를 어디에 선언하였는지에 따라 결정된다. 이를 렉시컬 스코핑(Lexical scoping)라 한다. \n위 예제의 함수 innerFunc는 함수 outerFunc의 내부에서 선언되었기 때문에 함수 innerFunc의 상위 스코프는 함수 outerFunc이다. \n함수 innerFunc가 전역에 선언되었다면 함수 innerFunc의 상위 스코프는 전역 스코프가 된다.</code></pre></div>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference.</h3>\n<ul>\n<li><a href=\"https://poiemaweb.com/js-closure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">👉🏻클로저</a></li>\n</ul>\n<hr>\n<p>오늘 준비한 내용은 여기까지 입니다.<br>\n이번 포스팅이 도움이 되셨거나 궁금한 점이 있으시다면 언제든지 댓글을 달아주세요!🙋🏻‍♀️✨    </p>","fields":{"slug":"/posts/nodejs/closure-function","tagSlugs":["/tag/nodejs/","/tag/javascript/","/tag/closure/"]},"frontmatter":{"date":"2021-01-28 23:22:33","description":"이번 포스팅 에서는 `Javascript`에서 중요한 개념 중 하나인 클로저(Closure)에 대해 작성해 보겠습니다.","tags":["Nodejs","Javascript","Closure"],"title":"[Node.js] 클로저(Closure)란?","socialImage":null}}},"pageContext":{"slug":"/posts/nodejs/closure-function"}},"staticQueryHashes":["251939775","401334301","825871152"]}