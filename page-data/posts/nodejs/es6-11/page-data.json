{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodejs/es6-11","result":{"data":{"markdownRemark":{"id":"d127adc9-c1d4-52aa-96ab-9cf314e7b0cf","html":"<p>안녕하세요!</p>\n<p>이번 포스팅 에서는 <code class=\"language-text\">Javascript</code> 버전에 새로 추가된 <code class=\"language-text\">ES6</code>와 <code class=\"language-text\">ES11</code> 문법에 대해 소개 해 드리고자 합니다.<br>\nJavascript 뿐만 아니라 <code class=\"language-text\">React</code>, <code class=\"language-text\">Vue</code>, <code class=\"language-text\">Node.js</code> 에서도 유용 하게 쓰는 문법 이므로 숙지해 두면 좋을 것 같습니다!😄</p>\n<hr>\n<h3 id=\"-es6-문법\" style=\"position:relative;\"><a href=\"#-es6-%EB%AC%B8%EB%B2%95\" aria-label=\" es6 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐ ES6 문법.</h3>\n<ul>\n<li>아래 예제를 통해 Javascript ES6 버전의 문법을 소개해 드리겠습니다.</li>\n<li><code class=\"language-text\">AS-IS</code> 코드와 <code class=\"language-text\">TO-BE</code> 코드를 비교 해서 살펴 보신 다면 ES6 문법이 적용된 코드가 훨씬 간결 하고 가독성이 좋아진 것을 느끼실 수 있을 것 입니다!👍🏻</li>\n</ul>\n<h4 id=\"1-default-parameters\" style=\"position:relative;\"><a href=\"#1-default-parameters\" aria-label=\"1 default parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Default Parameters</h4>\n<ul>\n<li>함수에 파라미터 인자가 전달 되지 않았을 경우 초기 값을 지정 하여 나타내 주는 기능 입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><strong>printMessage</strong>이라는 함수에 <strong>message</strong>라는 인자가 전달되었을 때 값이 있으면 console에 출력하고, 값이 null이면 <strong>default message</strong>라고 나타내는 함수 입니다.</li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string\">'default message'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>TO-BE</p>\n<ul>\n<li><code class=\"language-text\">message</code> 인자에 <strong>default message</strong>라는 초기값을 할당해 준 상태에서 함수를 호출하게 되면 위의 코드와 동일한 결과로 나타납니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">=</span> <span class=\"token string\">'default message'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"2-shorthand-property-names\" style=\"position:relative;\"><a href=\"#2-shorthand-property-names\" aria-label=\"2 shorthand property names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Shorthand Property Names</h4>\n<ul>\n<li><code class=\"language-text\">Object</code>의 <code class=\"language-text\">property</code>가 변수명과 동일한 경우, 변수명을 그대로 사용할 수 있는 기능 입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><strong>code1</strong>에서는 Object에 변수명을 직접 할당해 주었고, <strong>code2</strong>에서는 이미 선언된 변수명을 불러옵니다. </li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'sangeun'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token string\">'18'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'sangeun'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> code2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> age\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>code1<span class=\"token punctuation\">,</span> code2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>TO-BE</p>\n<ul>\n<li><code class=\"language-text\">Property</code>가 변수명과 동일 한 <strong>name</strong>, <strong>age</strong> 이므로 단축 구문을 사용 해서 아래와 같이 표현할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'sangeun'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">;</span>\n    \n\n    <span class=\"token keyword\">const</span> code3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">,</span>\n        age\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>code3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-spread-syntax\" style=\"position:relative;\"><a href=\"#3-spread-syntax\" aria-label=\"3 spread syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Spread Syntax</h4>\n<ul>\n<li><code class=\"language-text\">Object</code>나 <code class=\"language-text\">Array</code>의 얕은 복사에 사용 하는 기능 입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li>Object로 나타낸 <strong>obj1</strong>와 <strong>obj2</strong>를 배열로 처리 하여 새로운 배열로 나타낸 예제 입니다.</li>\n<li><code class=\"language-text\">...array</code>를 사용하여 배열을 copy하고, 얕은 복사를 통해 copy한 배열에 새로운 object를 추가할 수 있습니다.</li>\n</ul>\n</li>\n<li>TO-BE</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">'key1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// array copy</span>\n    <span class=\"token keyword\">const</span> arrayCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> arrayCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> arrayCopy2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">'key3'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    obj1<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'newKey'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> arrayCopy<span class=\"token punctuation\">,</span> arrayCopy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//object copy</span>\n    <span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'newKey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'newKey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'newKey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'key3'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'newKey'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"4-template-literal\" style=\"position:relative;\"><a href=\"#4-template-literal\" aria-label=\"4 template literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Template Literal</h4>\n<ul>\n<li>문자열에 특정 변수의 값을 함께 사용할 때 유용한 기능 입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><code class=\"language-text\">${}</code>를 사용하여 특정 변수를 대입할 수 있고, 문자열을 연결하기 위해 일일이 <code class=\"language-text\">+</code> 하지 않아도 됩니다. </li>\n<li>또한 <strong>’</strong> 대신 백틱(back-tick)이라는 기호 <strong>`</strong> 를 사용해야 합니다.</li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> weather <span class=\"token operator\">=</span> <span class=\"token string\">'☀️'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token string\">'21도'</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Today weather is '</span> <span class=\"token operator\">+</span> weather <span class=\"token operator\">+</span> <span class=\"token string\">' and temperater is '</span> <span class=\"token operator\">+</span> temperature <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>TO-BE</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> weather <span class=\"token operator\">=</span> <span class=\"token string\">'☀️'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token string\">'21도'</span><span class=\"token punctuation\">;</span>\n   \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Today weather is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weather<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and temperater is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>temperature<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"5-ternary-operator\" style=\"position:relative;\"><a href=\"#5-ternary-operator\" aria-label=\"5 ternary operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Ternary Operator</h4>\n<ul>\n<li><strong>조건부 삼항 연산자</strong>는 Javascript에서 3개의 피연산자를 취할 수 있는 유일한 연산자 입니다. 보통 if 문의 단축 형태로 쓰입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><code class=\"language-text\">isDog</code>이 true/false 인에 따라 <strong>component</strong> 변수를 출력 합니다.</li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isDog <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> component<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            component <span class=\"token operator\">=</span> <span class=\"token string\">'🐶'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            component <span class=\"token operator\">=</span> <span class=\"token string\">'🐼'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>TO-BE</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isDog <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> isDog <span class=\"token operator\">?</span> <span class=\"token string\">'🐶'</span><span class=\"token operator\">:</span><span class=\"token string\">'🐼'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"️-es11-문법\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-es11-%EB%AC%B8%EB%B2%95\" aria-label=\"️ es11 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>️🌟 ES11 문법.</h3>\n<h4 id=\"1-optional-chaining\" style=\"position:relative;\"><a href=\"#1-optional-chaining\" aria-label=\"1 optional chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Optional Chaining</h4>\n<ul>\n<li>프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 사용할 수 있는 기능 입니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><strong>person1</strong>, <strong>person2</strong>라는 Object가 선언 되어 있습니다. 여기에 <strong>printManager</strong>라는 함수를 호출 하기 위해서 person 이라는 파라미터를 사용하게 되는데요.</li>\n<li><strong>person1</strong> 에서는 <strong>person.job.manager.name</strong> 파라미터가 있으므로 호출을 할 수 있지만, <strong>person2</strong>에는 해당 파라미터가 없으므로 에러를 출력하게 됩니다.</li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Sangeun'</span><span class=\"token punctuation\">,</span>\n        job<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            title<span class=\"token operator\">:</span> <span class=\"token string\">'S/W Engineer'</span><span class=\"token punctuation\">,</span>\n            manager<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>TO-BE</p>\n<ul>\n<li>ES11 버전에 추가된 <code class=\"language-text\">?.</code> 연산자를 사용하게 된다면 <strong>person2</strong>에 해당 파라미터가 없더라도 에러를 출력하지 않고 <code class=\"language-text\">undefined</code>를 출력하게 됩니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Sangeun'</span><span class=\"token punctuation\">,</span>\n        job<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            title<span class=\"token operator\">:</span> <span class=\"token string\">'S/W Engineer'</span><span class=\"token punctuation\">,</span>\n            manager<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>job<span class=\"token operator\">?.</span>manager<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printManager</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-nullish-coalescing-operator\" style=\"position:relative;\"><a href=\"#2-nullish-coalescing-operator\" aria-label=\"2 nullish coalescing operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Nullish Coalescing Operator</h4>\n<ul>\n<li><code class=\"language-text\">??</code> 연산자를 사용 하여 왼쪽 피연산자가 <strong>null</strong>이나 <strong>undefined</strong>일 때 오른쪽 피연산자를 return 합니다. 반대의 경우는 왼쪽 피연산자가 return 됩니다.</li>\n<li>\n<p>예제 코드 설명</p>\n<ul>\n<li><code class=\"language-text\">false</code>가 출력되는 경우는 <code class=\"language-text\">false</code>, <code class=\"language-text\">&#39;&#39;</code>, <code class=\"language-text\">0</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefiend</code> 입니다.</li>\n<li>그런데 원하는 값이 실제로 <code class=\"language-text\">false</code>, <code class=\"language-text\">&#39;&#39;</code>, <code class=\"language-text\">0</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefiend</code> 일수도 있습니다. 이런 경우에 유용 하게 사용할 수 있는 기능 입니다.</li>\n</ul>\n</li>\n<li>AS-IS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> num <span class=\"token operator\">||</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>TO-BE</p>\n<ul>\n<li><code class=\"language-text\">??</code> 연산자를 사용하여 왼쪽 피연산자가 <code class=\"language-text\">&#39;&#39;</code>이거나 <code class=\"language-text\">0</code>일 때 오른쪽 피연산자를 return 합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> name <span class=\"token operator\">??</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> num <span class=\"token operator\">??</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>오늘 준비한 내용은 여기까지 입니다.<br>\n이번 포스팅이 도움이 되셨거나 궁금한 점이 있으시다면 언제든지 댓글을 달아주세요!🙋🏻‍♀️✨    </p>","fields":{"slug":"/posts/nodejs/es6-11","tagSlugs":["/tag/nodejs/","/tag/javascript/","/tag/es-6/","/tag/es-11/","/tag/ecma-script-2020/"]},"frontmatter":{"date":"2020-12-16 14:55:23","description":"이번 포스팅 에서는 `Javascript` 버전에 새로 추가된 `ES6`와 `ES11` 문법에 대해 소개 해 드리고자 합니다.","tags":["Nodejs","Javascript","ES6","ES11","ECMAScript2020"],"title":"[Node.js] Javascript ES6 & ES11 문법 정리","socialImage":null}}},"pageContext":{"slug":"/posts/nodejs/es6-11"}},"staticQueryHashes":["251939775","401334301","825871152"]}